"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var SignatureFile_1 = __importDefault(require("./SignatureFile"));
var FileAlreadyExistsError_1 = __importDefault(require("../../errors/FileAlreadyExistsError"));
var Signer = /** @class */ (function () {
    function Signer(name, email, params) {
        if (params === void 0) { params = {}; }
        this.name = name;
        this._email = email;
        this.params = params;
        this.files = [];
        this.token_signer = '';
        this.token_requester = '';
        this.events = {};
    }
    Object.defineProperty(Signer.prototype, "email", {
        get: function () {
            return this._email;
        },
        enumerable: false,
        configurable: true
    });
    Signer.prototype.addFile = function (file) {
        var index = this.files.indexOf(file);
        if (index !== -1)
            throw new FileAlreadyExistsError_1.default();
        this.files.push(file);
    };
    Signer.prototype.deleteFile = function (file) {
        var index = this.files.indexOf(file);
        if (index !== -1)
            this.files.splice(index, 1);
    };
    Signer.prototype.updateStatus = function (status) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fireEvent('update.status', this, status)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Signer.prototype.updatePhone = function (phone) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fireEvent('update.phone', this, phone)];
                    case 1:
                        _a.sent();
                        this.params.phone = phone;
                        return [2 /*return*/];
                }
            });
        });
    };
    Signer.prototype.updateEmail = function (email) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fireEvent('update.email', this, email)];
                    case 1:
                        _a.sent();
                        this._email = email;
                        return [2 /*return*/];
                }
            });
        });
    };
    Signer.prototype.addEventListener = function (eventType, listener) {
        if (!this.events[eventType])
            this.events[eventType] = [];
        this.events[eventType].push(listener);
    };
    Signer.prototype.removeEventListener = function (eventType, listener) {
        if (!this.events[eventType])
            return;
        var index = this.events[eventType].indexOf(listener);
        if (index !== -1)
            this.events[eventType].splice(index, 1);
    };
    Signer.prototype.fireEvent = function (eventType) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, listener;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!this.events[eventType])
                            return [2 /*return*/];
                        _a = 0, _b = this.events[eventType];
                        _c.label = 1;
                    case 1:
                        if (!(_a < _b.length)) return [3 /*break*/, 4];
                        listener = _b[_a];
                        return [4 /*yield*/, listener.apply(void 0, args)];
                    case 2:
                        _c.sent();
                        _c.label = 3;
                    case 3:
                        _a++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    Signer.prototype.toJSON = function () {
        var files = this.files.map(function (file) { return file.toJSON(); });
        return __assign(__assign({ name: this.name, email: this.email }, this.params), { files: files });
    };
    Signer.from = function (signerJSON) {
        var name = signerJSON.name, email = signerJSON.email, access_code = signerJSON.access_code, custom_int = signerJSON.custom_int, custom_string = signerJSON.custom_string, force_signature_type = signerJSON.force_signature_type, phone = signerJSON.phone, type = signerJSON.type, _a = signerJSON.files, files = _a === void 0 ? [] : _a, token_requester = signerJSON.token_requester, token_signer = signerJSON.token_signer;
        // Define signer.
        var signer = new Signer(name, email, {
            access_code: access_code,
            custom_int: custom_int,
            custom_string: custom_string,
            force_signature_type: force_signature_type,
            phone: phone,
            type: type
        });
        // Inject response data.
        signer.token_requester = token_requester;
        signer.token_signer = !!token_signer ? token_signer : '';
        // Add its files.
        files === null || files === void 0 ? void 0 : files.forEach(function (file) {
            var signFile = SignatureFile_1.default.from(file);
            signer.addFile(signFile);
        });
        return signer;
    };
    return Signer;
}());
exports.default = Signer;
;
//# sourceMappingURL=Signer.js.map