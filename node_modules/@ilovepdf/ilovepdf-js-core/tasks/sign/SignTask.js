"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Task_1 = __importDefault(require("../Task"));
var globals_json_1 = __importDefault(require("../../constants/globals.json"));
var SignerAlreadyExistsError_1 = __importDefault(require("../../errors/SignerAlreadyExistsError"));
var util_1 = require("util");
var SignTask = /** @class */ (function (_super) {
    __extends(SignTask, _super);
    function SignTask(auth, xhr, params) {
        if (params === void 0) { params = {}; }
        var _this = _super.call(this, auth, xhr, params) || this;
        // Bindings.
        _this.updateSignerPhone = _this.updateSignerPhone.bind(_this);
        _this.updateSignerEmail = _this.updateSignerEmail.bind(_this);
        _this.updateSignerStatus = _this.updateSignerStatus.bind(_this);
        _this.type = 'sign';
        _this.requester = !!params.requester ? params.requester : null;
        _this.signers = !!params.signers ? params.signers : [];
        _this.addSignerListeners(_this.signers);
        _this.responses = {
            start: null,
            addFile: null,
            deleteFile: null,
            process: null,
            download: null,
            delete: null,
            connect: null
        };
        return _this;
    }
    /**
     * @inheritdoc
     */
    SignTask.prototype.getStatus = function () {
        return __awaiter(this, void 0, void 0, function () {
            var token, response, status;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.auth.getToken()];
                    case 1:
                        token = _a.sent();
                        return [4 /*yield*/, this.xhr.get(globals_json_1.default.API_URL_PROTOCOL + "://" + this.server + "/" + globals_json_1.default.API_VERSION + "/signature/" + this.id, {
                                headers: [
                                    ['Content-Type', 'application/json;charset=UTF-8'],
                                    ['Authorization', "Bearer " + token]
                                ],
                                transformResponse: function (res) { return JSON.parse(res); }
                            })];
                    case 2:
                        response = _a.sent();
                        status = {
                            document: response.status,
                            signers: {}
                        };
                        response.signers.forEach(function (signer) {
                            var email = signer.email, email_status = signer.email_status, phone_status = signer.phone_status;
                            status.signers[email] = {
                                email_status: email_status,
                                phone_status: phone_status
                            };
                        });
                        return [2 /*return*/, status];
                }
            });
        });
    };
    /**
     * Saves the current task as template.
     * @param params - Template params.
     */
    SignTask.prototype.saveAsTemplate = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var token, data;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.auth.getToken()];
                    case 1:
                        token = _a.sent();
                        data = this.createSignatureData(params);
                        return [2 /*return*/, this.xhr.post(globals_json_1.default.API_URL_PROTOCOL + "://" + this.server + "/" + globals_json_1.default.API_VERSION + "/signature/template", data, {
                                headers: [
                                    ['Content-Type', 'application/json;charset=UTF-8'],
                                    ['Authorization', "Bearer " + token]
                                ],
                                transformResponse: function (res) { return JSON.parse(res); }
                            })
                                .then(function () { return _this; })];
                }
            });
        });
    };
    SignTask.prototype.processFromTemplate = function (template) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                data = JSON.stringify(template);
                return [2 /*return*/, this.processWithData(data)];
            });
        });
    };
    SignTask.prototype.process = function (params) {
        if (params === void 0) { params = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                data = this.createSignatureData(params);
                return [2 /*return*/, this.processWithData(data)];
            });
        });
    };
    /**
     * Creates a signature object as string to send to server.
     * @param params - Params to create a custom signature.
     */
    SignTask.prototype.createSignatureData = function (params) {
        var _a;
        // Convert to files request format.
        var files = this.getFilesBodyFormat();
        var signers = this.signers.map(function (signer) { return (signer.toJSON()); });
        // On batch mode, signature files are put in the root of the object.
        var batch_elements;
        if (params.mode === 'batch')
            batch_elements = (_a = params.batch_elements) === null || _a === void 0 ? void 0 : _a.map(function (file) { return file.toJSON(); });
        return JSON.stringify(__assign(__assign(__assign({ task: this.id, files: files }, this.requester), { signers: signers,
            batch_elements: batch_elements }), params));
    };
    SignTask.prototype.fillSignerTokens = function (responseSigners) {
        this.signers.forEach(function (signer, index) {
            var _a = responseSigners[index], token_signer = _a.token_signer, token_requester = _a.token_requester;
            signer.token_signer = token_signer || '';
            signer.token_requester = token_requester;
        });
    };
    SignTask.prototype.processWithData = function (processData) {
        return __awaiter(this, void 0, void 0, function () {
            var token;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.auth.getToken()];
                    case 1:
                        token = _a.sent();
                        return [2 /*return*/, this.xhr.post(globals_json_1.default.API_URL_PROTOCOL + "://" + this.server + "/" + globals_json_1.default.API_VERSION + "/signature", processData, {
                                headers: [
                                    ['Content-Type', 'application/json;charset=UTF-8'],
                                    ['Authorization', "Bearer " + token]
                                ],
                                transformResponse: function (res) { return JSON.parse(res); }
                            })
                                .then(function (data) {
                                // Maintain a consistency returning always an array
                                // with signatures.
                                if (util_1.isArray(data)) {
                                    data.forEach(function (signature) {
                                        _this.fillSignerTokens(signature.signers);
                                    });
                                    // Keep response.
                                    _this.responses.process = data;
                                }
                                else {
                                    _this.fillSignerTokens(data.signers);
                                    // Keep response.
                                    _this.responses.process = [data];
                                }
                                return _this;
                            })];
                }
            });
        });
    };
    SignTask.prototype.addSigner = function (signer) {
        var index = this.signers.indexOf(signer);
        if (index !== -1)
            throw new SignerAlreadyExistsError_1.default();
        // Add signers to manage instance changes.
        this.addSignerListeners([signer]);
        this.signers.push(signer);
    };
    SignTask.prototype.deleteSigner = function (signer) {
        var index = this.signers.indexOf(signer);
        if (index !== -1) {
            // Remove listeners for garbage collector.
            this.removeSignerListeners([signer]);
            this.signers.splice(index, 1);
        }
    };
    SignTask.prototype.addSignerListeners = function (signers) {
        var _this = this;
        signers.forEach(function (signer) {
            signer.addEventListener('update.phone', _this.updateSignerPhone);
            signer.addEventListener('update.email', _this.updateSignerEmail);
            signer.addEventListener('update.status', _this.updateSignerStatus);
        });
    };
    SignTask.prototype.removeSignerListeners = function (signers) {
        var _this = this;
        signers.forEach(function (signer) {
            signer.removeEventListener('update.phone', _this.updateSignerPhone);
            signer.removeEventListener('update.email', _this.updateSignerEmail);
            signer.removeEventListener('update.status', _this.updateSignerStatus);
        });
    };
    SignTask.prototype.updateSignerPhone = function (signer, phone) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                data = JSON.stringify({ phone: phone });
                return [2 /*return*/, this.updateSignerField(globals_json_1.default.API_URL_PROTOCOL + "://" + this.server + "/" + globals_json_1.default.API_VERSION + "/signature/signer/fix-phone/" + signer.token_requester, data)];
            });
        });
    };
    SignTask.prototype.updateSignerEmail = function (signer, email) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                data = JSON.stringify({ email: email });
                return [2 /*return*/, this.updateSignerField(globals_json_1.default.API_URL_PROTOCOL + "://" + this.server + "/" + globals_json_1.default.API_VERSION + "/signature/signer/fix-email/" + signer.token_requester, data)];
            });
        });
    };
    SignTask.prototype.updateSignerStatus = function (signer, status) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                data = JSON.stringify({ status: status });
                return [2 /*return*/, this.updateSignerField(globals_json_1.default.API_URL_PROTOCOL + "://" + this.server + "/" + globals_json_1.default.API_VERSION + "/signature/signer/" + signer.token_signer, data)];
            });
        });
    };
    SignTask.prototype.updateSignerField = function (url, data) {
        return __awaiter(this, void 0, void 0, function () {
            var token;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.auth.getToken()];
                    case 1:
                        token = _a.sent();
                        return [2 /*return*/, this.xhr.put(url, data, {
                                headers: [
                                    ['Content-Type', 'application/json;charset=UTF-8'],
                                    ['Authorization', "Bearer " + token]
                                ],
                                transformResponse: function (res) { return JSON.parse(res); }
                            })];
                }
            });
        });
    };
    return SignTask;
}(Task_1.default));
exports.default = SignTask;
;
//# sourceMappingURL=SignTask.js.map