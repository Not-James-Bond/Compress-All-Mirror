"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var MergeTask_1 = __importDefault(require("./MergeTask"));
var TaskTypeNotExistsError_1 = __importDefault(require("../errors/TaskTypeNotExistsError"));
var SplitTask_1 = __importDefault(require("./SplitTask"));
var CompressTask_1 = __importDefault(require("./CompressTask"));
var WatermarkTask_1 = __importDefault(require("./WatermarkTask"));
var ValidatePdfaTask_1 = __importDefault(require("./ValidatePdfaTask"));
var ProtectTask_1 = __importDefault(require("./ProtectTask"));
var PdfJpgTask_1 = __importDefault(require("./PdfJpgTask"));
var PdfaTask_1 = __importDefault(require("./PdfaTask"));
var PageNumberTask_1 = __importDefault(require("./PageNumberTask"));
var ImagePdfTask_1 = __importDefault(require("./ImagePdfTask"));
var UnlockTask_1 = __importDefault(require("./UnlockTask"));
var RotateTask_1 = __importDefault(require("./RotateTask"));
var RepairTask_1 = __importDefault(require("./RepairTask"));
var OfficePdfTask_1 = __importDefault(require("./OfficePdfTask"));
var HtmlPdfTask_1 = __importDefault(require("./HtmlPdfTask"));
var ExtractTask_1 = __importDefault(require("./ExtractTask"));
var TaskFactory = /** @class */ (function () {
    function TaskFactory() {
    }
    /**
     * Factory method to create a task with the correct params.
     * @param taskType - Task type that will use a specific ILovePDF tool.
     * @param params - Parameters to customize the process.
     */
    TaskFactory.prototype.newTask = function (taskType, auth, xhr, params) {
        if (params === void 0) { params = {}; }
        if (taskType === 'merge') {
            return new MergeTask_1.default(auth, xhr, params);
        }
        else if (taskType === 'split') {
            return new SplitTask_1.default(auth, xhr, params);
        }
        else if (taskType === 'compress') {
            return new CompressTask_1.default(auth, xhr, params);
        }
        else if (taskType === 'extract') {
            return new ExtractTask_1.default(auth, xhr, params);
        }
        else if (taskType === 'htmlpdf') {
            return new HtmlPdfTask_1.default(auth, xhr, params);
        }
        else if (taskType === 'imagepdf') {
            return new ImagePdfTask_1.default(auth, xhr, params);
        }
        else if (taskType === 'officepdf') {
            return new OfficePdfTask_1.default(auth, xhr, params);
        }
        else if (taskType === 'pagenumber') {
            return new PageNumberTask_1.default(auth, xhr, params);
        }
        else if (taskType === 'pdfa') {
            return new PdfaTask_1.default(auth, xhr, params);
        }
        else if (taskType === 'pdfjpg') {
            return new PdfJpgTask_1.default(auth, xhr, params);
        }
        else if (taskType === 'protect') {
            return new ProtectTask_1.default(auth, xhr, params);
        }
        else if (taskType === 'repair') {
            return new RepairTask_1.default(auth, xhr, params);
        }
        else if (taskType === 'rotate') {
            return new RotateTask_1.default(auth, xhr, params);
        }
        else if (taskType === 'unlock') {
            return new UnlockTask_1.default(auth, xhr, params);
        }
        else if (taskType === 'validatepdfa') {
            return new ValidatePdfaTask_1.default(auth, xhr, params);
        }
        else if (taskType === 'watermark') {
            return new WatermarkTask_1.default(auth, xhr, params);
        }
        // Don't return and throw an error.
        throw new TaskTypeNotExistsError_1.default();
    };
    return TaskFactory;
}());
exports.default = TaskFactory;
//# sourceMappingURL=TaskFactory.js.map