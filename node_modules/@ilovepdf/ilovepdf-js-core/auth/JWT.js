"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var globals_json_1 = __importDefault(require("../constants/globals.json"));
var AuthError_1 = __importDefault(require("../errors/AuthError"));
var jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
var FileEncryptionKeyError_1 = __importDefault(require("../errors/FileEncryptionKeyError"));
var JWT = /** @class */ (function () {
    function JWT(xhr, publicKey, secretKey, params) {
        if (secretKey === void 0) { secretKey = ''; }
        if (params === void 0) { params = {}; }
        this.xhr = xhr;
        this.publicKey = publicKey;
        this.secretKey = secretKey;
        this.file_encryption_key = params.file_encryption_key;
        // Validations.
        this.validateFileEncryptionKey(this.file_encryption_key);
    }
    JWT.prototype.validateFileEncryptionKey = function (fileEncryptionKey) {
        if (typeof fileEncryptionKey === 'string') {
            if (fileEncryptionKey.length !== 14 && fileEncryptionKey.length !== 16 &&
                fileEncryptionKey.length !== 32) {
                throw new FileEncryptionKeyError_1.default('Encryption key shold have 16, 14 or 32 chars length');
            }
        }
    };
    JWT.prototype.getToken = function () {
        return __awaiter(this, void 0, void 0, function () {
            var tokenPromise;
            var _this = this;
            return __generator(this, function (_a) {
                this.verifyToken();
                // Use cache if there is a valid token.
                if (!!this.token)
                    return [2 /*return*/, Promise.resolve(this.token)];
                if (!this.secretKey) {
                    tokenPromise = this.getTokenFromServer();
                }
                else {
                    tokenPromise = this.getTokenLocally();
                }
                return [2 /*return*/, tokenPromise.then(function (token) {
                        // Cache token.
                        _this.token = token;
                        return token;
                    })];
            });
        });
    };
    /**
     * Verifies if this.token is well signed and not expired. In case of been
     * wrong-signed or expired, token is set to undefined to reset it.
     */
    JWT.prototype.verifyToken = function () {
        if (!!this.token) {
            // When there is secret key, signature and expiration date can be validated.
            if (this.secretKey) {
                try {
                    // Throws an error if token is invalid.
                    jsonwebtoken_1.default.verify(this.token, this.secretKey);
                }
                catch (error) {
                    this.token = undefined;
                }
            }
            else { // Otherwise, look only expiration date.
                var decoded = jsonwebtoken_1.default.decode(this.token);
                var exp = decoded.exp;
                // Get epoch in seconds.
                var timeNow = Date.now() / 1000;
                // If it is an expired token, reset token cache.
                var isExpired = timeNow > Number(exp);
                if (isExpired)
                    this.token = undefined;
            }
        }
    };
    JWT.prototype.getTokenFromServer = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.xhr.post(globals_json_1.default.API_URL_PROTOCOL + "://" + globals_json_1.default.API_URL + "/" + globals_json_1.default.API_VERSION + "/auth", JSON.stringify({
                        public_key: this.publicKey
                    }), {
                        headers: [
                            ['Content-Type', 'application/json;charset=UTF-8']
                        ],
                        transformResponse: function (res) { return JSON.parse(res); }
                    })
                        .then(function (data) {
                        var token = data.token;
                        if (!token) {
                            throw new AuthError_1.default('Auth token cannot be retrieved');
                        }
                        return token;
                    })
                        .catch(function (e) {
                        throw e;
                    })];
            });
        });
    };
    JWT.prototype.getTokenLocally = function () {
        return __awaiter(this, void 0, void 0, function () {
            var timeNow, payload, secretKey, token;
            return __generator(this, function (_a) {
                timeNow = Date.now() / 1000;
                payload = {
                    jti: this.publicKey,
                    iss: globals_json_1.default.API_URL,
                    // There is an error in server that does not accept
                    // recent generated tokens. Due to this, iat time is
                    // modified with the current time less a time delay.
                    iat: timeNow - JWT.TIME_DELAY,
                    file_encryption_key: this.file_encryption_key
                };
                secretKey = this.secretKey;
                token = jsonwebtoken_1.default.sign(payload, secretKey);
                // Cache token.
                this.token = token;
                return [2 /*return*/, token];
            });
        });
    };
    // There are times between responses that servers demands
    // a little delay or it does not accept
    JWT.TIME_DELAY = 5;
    return JWT;
}());
exports.default = JWT;
//# sourceMappingURL=JWT.js.map