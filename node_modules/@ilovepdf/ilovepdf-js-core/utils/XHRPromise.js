"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var ILovePDFFile_1 = __importDefault(require("./ILovePDFFile"));
var axios_1 = __importDefault(require("axios"));
var HTTPVerbNotSupportedError_1 = __importDefault(require("../errors/HTTPVerbNotSupportedError"));
var XHRPromise = /** @class */ (function () {
    function XHRPromise() {
    }
    XHRPromise.prototype.get = function (url, options) {
        if (options === void 0) { options = {}; }
        return XHRPromise.makeRequest('GET', url, undefined, options);
    };
    XHRPromise.prototype.post = function (url, data, options) {
        var _a;
        if (options === void 0) { options = {}; }
        var injectedData = data;
        var injectedOptions = options;
        // If it is a file, it has special treatment with HTTP extracting its data.
        if (data instanceof ILovePDFFile_1.default) {
            _a = this.injectRequestInformation(data, options), injectedData = _a[0], injectedOptions = _a[1];
        }
        return XHRPromise.makeRequest('POST', url, injectedData, injectedOptions);
    };
    // ILovePDFFiles has to be sent with a specific HTTP configuration.
    XHRPromise.prototype.injectRequestInformation = function (data, options) {
        // Access to "native" data.
        var formData = data.data;
        var injectedData = formData.getBuffer();
        var extraHeaders = formData.getHeaders();
        // 'form-data' package returns Content-Type as content-type. This is an
        // error due to the first words have to be in upper-case. We fix this here.
        extraHeaders['Content-Type'] = extraHeaders['content-type'];
        delete extraHeaders['content-type'];
        // Inject new headers with old headers.
        var headersArray = !!options.headers ? options.headers : [];
        var headersConcat = Object.entries(extraHeaders).concat(headersArray);
        // Copy object.
        var injectedOptions = __assign({}, options);
        // Set binary option.
        injectedOptions.headers = headersConcat;
        return [injectedData, injectedOptions];
    };
    XHRPromise.prototype.put = function (url, data, options) {
        if (options === void 0) { options = {}; }
        return XHRPromise.makeRequest('PUT', url, data, options);
    };
    XHRPromise.prototype.delete = function (url, options) {
        if (options === void 0) { options = {}; }
        return XHRPromise.makeRequest('DELETE', url, undefined, options);
    };
    XHRPromise.makeRequest = function (method, url, data, options) {
        if (options === void 0) { options = {}; }
        var requestConfig = XHRPromise.getRequestConfig(options);
        switch (method) {
            case 'GET':
                return XHRPromise.getRequest(url, requestConfig);
            case 'POST':
                return XHRPromise.postRequest(url, requestConfig, data);
            case 'PUT':
                return XHRPromise.putRequest(url, requestConfig, data);
            case 'DELETE':
                return XHRPromise.deleteRequest(url, requestConfig);
            default:
                throw new HTTPVerbNotSupportedError_1.default();
        }
    };
    XHRPromise.getRequest = function (url, config) {
        return axios_1.default.get(url, config)
            .then(function (response) {
            return response.data;
        });
    };
    XHRPromise.deleteRequest = function (url, config) {
        return axios_1.default.delete(url, config)
            .then(function (response) {
            return response.data;
        });
    };
    XHRPromise.postRequest = function (url, config, data) {
        return axios_1.default.post(url, data, config)
            .then(function (response) {
            return response.data;
        });
    };
    XHRPromise.putRequest = function (url, config, data) {
        return axios_1.default.put(url, data, config)
            .then(function (response) {
            return response.data;
        });
    };
    XHRPromise.getRequestConfig = function (options) {
        var headers = {};
        if (!!options.headers) {
            options.headers.forEach(function (_a) {
                var key = _a[0], value = _a[1];
                headers[key] = value;
            });
        }
        // Configuration to not encode in case of binary file.
        var responseType = !!options.binary ? 'arraybuffer' : 'text';
        // Transform response.
        var transformResponse = options.transformResponse;
        return {
            headers: headers,
            responseType: responseType,
            transformResponse: transformResponse
        };
    };
    return XHRPromise;
}());
exports.default = XHRPromise;
//# sourceMappingURL=XHRPromise.js.map