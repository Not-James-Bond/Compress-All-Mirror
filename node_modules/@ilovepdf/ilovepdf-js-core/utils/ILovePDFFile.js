"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var form_data_1 = __importDefault(require("form-data"));
var fs_1 = __importDefault(require("fs"));
var BaseFile_1 = __importDefault(require("../tasks/BaseFile"));
var ILovePDFFile = /** @class */ (function (_super) {
    __extends(ILovePDFFile, _super);
    function ILovePDFFile(fileAbsolutePath, params) {
        var _this = this;
        var basename = getBasename(fileAbsolutePath);
        _this = _super.call(this, '', '', basename, params) || this;
        var file = fs_1.default.readFileSync(fileAbsolutePath);
        _this.file = file;
        return _this;
    }
    Object.defineProperty(ILovePDFFile.prototype, "data", {
        get: function () {
            // Create each time due to 'task'
            // property could change previously.
            var formData = new form_data_1.default();
            formData.append('task', this.taskId);
            formData.append('file', this.file, { filename: this.filename });
            return formData;
        },
        enumerable: false,
        configurable: true
    });
    return ILovePDFFile;
}(BaseFile_1.default));
exports.default = ILovePDFFile;
function getBasename(path) {
    var firstIndex = path.lastIndexOf('/') + 1;
    if (firstIndex === -1)
        throw new Error('Path is malformed');
    var basename = path.substring(firstIndex);
    return basename;
}
//# sourceMappingURL=ILovePDFFile.js.map