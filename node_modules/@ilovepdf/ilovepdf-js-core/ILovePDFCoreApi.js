"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var globals_json_1 = __importDefault(require("./constants/globals.json"));
var SignTask_1 = __importDefault(require("./tasks/sign/SignTask"));
var Signer_1 = __importDefault(require("./tasks/sign/Signer"));
var BaseFile_1 = __importDefault(require("./tasks/BaseFile"));
/**
 * Retrieves a signature template.
 * @param auth - Auth system to generate the correct credentials.
 * @param xhr - XHR system to make requests.
 * @param templateTaskId - Task id of the task that created the template.
 */
var getSignatureTemplate = function (auth, xhr, templateTaskId) { return __awaiter(void 0, void 0, void 0, function () {
    var token, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, auth.getToken()];
            case 1:
                token = _a.sent();
                return [4 /*yield*/, xhr.get(globals_json_1.default.API_URL_PROTOCOL + "://" + globals_json_1.default.API_URL + "/" + globals_json_1.default.API_VERSION + "/signature/template/" + templateTaskId, {
                        headers: [
                            ['Content-Type', 'application/json;charset=UTF-8'],
                            ['Authorization', "Bearer " + token]
                        ],
                        transformResponse: function (res) { return JSON.parse(res); }
                    })];
            case 2:
                response = _a.sent();
                return [2 /*return*/, JSON.parse(response.elements)];
        }
    });
}); };
/**
 * Retrieves a signature task.
 * @param auth - Auth system to generate the correct credentials.
 * @param xhr - XHR system to make requests.
 * @param signatureTaskId - Signature task id.
 */
var getSignature = function (auth, xhr, signatureTaskId) { return __awaiter(void 0, void 0, void 0, function () {
    var token, response, email, name, custom_int, custom_string, task, requester, signers, files, signTask;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, auth.getToken()];
            case 1:
                token = _a.sent();
                return [4 /*yield*/, xhr.get(globals_json_1.default.API_URL_PROTOCOL + "://" + globals_json_1.default.API_URL + "/" + globals_json_1.default.API_VERSION + "/signature/" + signatureTaskId, {
                        headers: [
                            ['Content-Type', 'application/json;charset=UTF-8'],
                            ['Authorization', "Bearer " + token]
                        ],
                        transformResponse: function (res) { return JSON.parse(res); }
                    })];
            case 2:
                response = _a.sent();
                email = response.email, name = response.name, custom_int = response.custom_int, custom_string = response.custom_string, task = response.task;
                requester = {
                    email: email,
                    name: name,
                    custom_int: custom_int,
                    custom_string: custom_string
                };
                signers = response.signers.map(function (signerResponse) {
                    var signer = Signer_1.default.from(signerResponse);
                    return signer;
                });
                files = response.files.map(function (file) {
                    return new BaseFile_1.default('', file.server_filename, file.filename);
                });
                signTask = new SignTask_1.default(auth, xhr, {
                    files: files,
                    id: task,
                    requester: requester,
                    signers: signers
                });
                // Assign worker.
                return [4 /*yield*/, signTask.start()];
            case 3:
                // Assign worker.
                _a.sent();
                return [2 /*return*/, signTask];
        }
    });
}); };
exports.default = {
    getSignatureTemplate: getSignatureTemplate,
    getSignature: getSignature
};
//# sourceMappingURL=ILovePDFCoreApi.js.map