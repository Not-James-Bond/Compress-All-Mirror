"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var __1 = __importDefault(require(".."));
var dotenv_1 = __importDefault(require("dotenv"));
var SignatureFile_1 = __importDefault(require("@ilovepdf/ilovepdf-core/dist/tasks/sign/SignatureFile"));
var Signer_1 = __importDefault(require("@ilovepdf/ilovepdf-core/dist/tasks/sign/Signer"));
// Load env vars.
dotenv_1.default.config();
var api = new __1.default(process.env.PUBLIC_KEY, process.env.SECRET_KEY);
var task = api.newTask('sign');
task.start()
    .then(function () {
    return task.addFile('https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf');
})
    .then(function () {
    // Requester is the person who sends the document to sign.
    task.requester = {
        name: 'Diego',
        email: 'emailto@test.com'
    };
    var file = task.getFiles()[0];
    // You can associate to files elements such as
    // signatures, initials, text and more.
    var signatureFile = new SignatureFile_1.default(file, [{
            type: 'signature',
            position: '300 -100',
            pages: '1',
            size: 28,
            color: '#000000',
            font: '',
            content: ''
        }]);
    // Signer is the person who signs. Requester and signer can be the
    // same person.
    var signer = new Signer_1.default('Diego', 'emailto@test.com', {
        type: 'signer',
        force_signature_type: 'all'
    });
    signer.addFile(signatureFile);
    task.addSigner(signer);
    return task.process({
        mode: 'multiple',
        custom_int: 0,
        custom_string: '0'
    });
})
    .then(function () { return __awaiter(void 0, void 0, void 0, function () {
    var createdSignTask, status, signer, updatedStatus;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, api.getSignature(task.id)];
            case 1:
                createdSignTask = _a.sent();
                return [4 /*yield*/, createdSignTask.getStatus()];
            case 2:
                status = _a.sent();
                console.log(status);
                signer = createdSignTask.signers[0];
                return [4 /*yield*/, signer.updatePhone('654654654')];
            case 3:
                _a.sent();
                return [4 /*yield*/, createdSignTask.getStatus()];
            case 4:
                updatedStatus = _a.sent();
                console.log(updatedStatus);
                return [2 /*return*/];
        }
    });
}); });
//# sourceMappingURL=get-signature.js.map